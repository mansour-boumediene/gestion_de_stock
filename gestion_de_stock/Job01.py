import tkinter as tkfrom tkinter import ttk, messagebox, simpledialogimport mysql.connectorclass StockManagementApp:    def __init__(self, root):        self.root = root        self.root.title("Gestion des stocks")        self.conn = mysql.connector.connect(            host="localhost",            user="root",            password="mansour13",            database="store"        )        self.cursor = self.conn.cursor()                columns = ("ID", "Nom", "Description", "Prix", "Quantité", "Catégorie")        self.tree = ttk.Treeview(root, columns=columns, show="headings")        for col in columns:            self.tree.heading(col, text=col)        self.tree.pack()               btn_frame = tk.Frame(root)        btn_frame.pack(pady=10)        btn_add = tk.Button(btn_frame, text="Ajouter produit", command=self.add_product)        btn_add.grid(row=0, column=0, padx=5)        btn_delete = tk.Button(btn_frame, text="Supprimer produit", command=self.delete_product)        btn_delete.grid(row=0, column=1, padx=5)        btn_update = tk.Button(btn_frame, text="Modifier produit", command=self.update_product_dialog)        btn_update.grid(row=0, column=2, padx=5)             self.display_products()    def display_products(self):              for row in self.tree.get_children():            self.tree.delete(row)               self.cursor.execute('''            SELECT product.id, product.name, product.description, product.price, product.quantity, category.name            FROM product            JOIN category ON product.id_category = category.id        ''')        products = self.cursor.fetchall()               for product in products:            self.tree.insert("", "end", values=product)    def add_product(self):        self.add_product_dialog()    def add_product_dialog(self):        dialog = simpledialog.Toplevel(self.root)        dialog.title("Ajouter un produit")            tk.Label(dialog, text="Nom:").grid(row=0, column=0, padx=10, pady=5)        name_entry = tk.Entry(dialog)        name_entry.grid(row=0, column=1, padx=10, pady=5)        tk.Label(dialog, text="Description:").grid(row=1, column=0, padx=10, pady=5)        description_entry = tk.Entry(dialog)        description_entry.grid(row=1, column=1, padx=10, pady=5)        tk.Label(dialog, text="Prix:").grid(row=2, column=0, padx=10, pady=5)        price_entry = tk.Entry(dialog)        price_entry.grid(row=2, column=1, padx=10, pady=5)        tk.Label(dialog, text="Quantité:").grid(row=3, column=0, padx=10, pady=5)        quantity_entry = tk.Entry(dialog)        quantity_entry.grid(row=3, column=1, padx=10, pady=5)                new_category_entry = tk.Entry(dialog)        new_category_entry.grid(row=4, column=1, padx=10, pady=5)                tk.Label(dialog, text="Catégorie:").grid(row=4, column=0, padx=10, pady=5)        categories = self.get_categories()        category_var = tk.StringVar()        category_var.set(categories[0])          category_menu = tk.OptionMenu(dialog, category_var, *categories)        category_menu.grid(row=4, column=1, padx=10, pady=5)        add_btn = tk.Button(dialog, text="Ajouter", command=lambda: self.add_product_action(        name_entry.get(), description_entry.get(), price_entry.get(), quantity_entry.get(),        new_category_entry.get() if new_category_entry.get() else category_var.get(), dialog))        add_btn.grid(row=6, column=0, columnspan=2, pady=10)               def add_product_action(self, name, description, price, quantity, category, dialog):           self.cursor.execute("""            INSERT INTO product (name, description, price, quantity, id_category)            VALUES (%s, %s, %s, %s, (SELECT id FROM category WHERE name = %s))    """, (name, description, price, quantity, category))        self.conn.commit()            dialog.destroy()          self.display_products()    def delete_product(self):                selected_item = self.tree.selection()        if not selected_item:            messagebox.showwarning("Avertissement", "Veuillez sélectionner un produit à supprimer.")            return               confirm = messagebox.askyesno("Confirmation", "Voulez-vous vraiment supprimer ce produit?")        if not confirm:            return              product_id = self.tree.item(selected_item)['values'][0]               self.cursor.execute("DELETE FROM product WHERE id = ?", (product_id,))              self.conn.commit()                self.display_products()    def update_product_dialog(self):        selected_item = self.tree.selection()        if not selected_item:            messagebox.showwarning("Avertissement", "Veuillez sélectionner un produit à modifier.")            return               dialog = simpledialog.Toplevel(self.root)        dialog.title("Modifier un produit")              product_id, name, description, price, quantity, category = self.tree.item(selected_item)['values']                tk.Label(dialog, text="Nom:").grid(row=0, column=0, padx=10, pady=5)        name_entry = tk.Entry(dialog)        name_entry.insert(0, name)        name_entry.grid(row=0, column=1, padx=10, pady=5)        tk.Label(dialog, text="Description:").grid(row=1, column=0, padx=10, pady=5)        description_entry = tk.Entry(dialog)        description_entry.insert(0, description)        description_entry.grid(row=1, column=1, padx=10, pady=5)        tk.Label(dialog, text="Prix:").grid(row=2, column=0, padx=10, pady=5)        price_entry = tk.Entry(dialog)        price_entry.insert(0, price)        price_entry.grid(row=2, column=1, padx=10, pady=5)        tk.Label(dialog, text="Quantité:").grid(row=3, column=0, padx=10, pady=5)        quantity_entry = tk.Entry(dialog)        quantity_entry.insert(0, quantity)        quantity_entry.grid(row=3, column=1, padx=10, pady=5)              tk.Label(dialog, text="Catégorie:").grid(row=4, column=0, padx=10, pady=5)        categories = self.get_categories()        category_var = tk.StringVar()        category_var.set(category)        category_menu = tk.OptionMenu(dialog, category_var, *categories)        category_menu.grid(row=4, column=1, padx=10, pady=5)        update_btn = tk.Button(dialog, text="Mettre à jour", command=lambda: self.update_product_action(            product_id, name_entry.get(), description_entry.get(), price_entry.get(), quantity_entry.get(), category_var.get(), dialog))        update_btn.grid(row=5, column=0, columnspan=2, pady=10)    def update_product_action(self, product_id, name, description, price, quantity, category, dialog):                self.cursor.execute("""            UPDATE product            SET name = ?, description = ?, price = ?, quantity = ?, id_category = (SELECT id FROM category WHERE name = ?)            WHERE id = ?        """, (name, description, price, quantity, category, product_id))              self.conn.commit()        dialog.destroy()        self.display_products()    def get_categories(self):        self.cursor.execute("SELECT name FROM category")        categories = [row[0] for row in self.cursor.fetchall()]        return categoriesif __name__ == "__main__":    root = tk.Tk()    app = StockManagementApp(root)    root.mainloop()